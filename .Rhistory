theme_bw()
PLOT_Walk
Summary_step_wide_length <- step_wide_length %>%
group_by(full_id,  parameter,day) %>%
summarize(avg_y = mean(dist_y),avg_x = mean(dist_x),
max_y = unname(quantile(dist_y, 0.95)), max_x = unname(quantile(dist_x, 0.95)), # max values are determined by upper .95 values
min_y = unname(quantile(dist_y, 0.05)), min_x = unname(quantile(dist_x, 0.05))) %>% # min values are deteminerd by lowest .05 values
gather(category, value, avg_y:min_x) %>%
mutate(parameter = factor(parameter, levels = c("d-front-left", "d-back-left", "d-back-right", "d-front-right")))
limbcolors <- brewer.pal(4, "Set1")
PLOT_Wide_Length <- ggplot(Summary_step_wide_length, aes(x= day, y=value)) +
stat_boxplot(geom = "errorbar", width = 0.5)+
geom_boxplot(aes(fill=parameter)) +
stat_summary(fun=mean, geom="point", shape=23, size=3, color="black", fill ="white")+
geom_jitter(width=0.1, alpha=0.4, pch=21,size=2.5, fill ="lightgrey")+
facet_wrap(category~parameter, scales = "free", ncol=8)+
scale_fill_manual(values=limbcolors)+
theme_bw()+
theme(legend.position="none")
PLOT_Wide_Length
# right front x
angles_right_front_x <-  Speed_down_pre %>% ungroup() %>%
filter(parameter %in% c("d-front-right"  , "d-center-front")) %>%
select(parameter, x_corr, full_id, day,time) %>%
spread(parameter, x_corr, convert = F) %>% drop_na()
# right front y
angles_right_front_y <-  Speed_down_pre %>% ungroup() %>%
filter(parameter %in% c("d-front-right" ,  "d-center-front")) %>%
select(parameter, y_corr, full_id, day,time) %>%
spread(parameter, y_corr, convert = F) %>% drop_na()
# left front x
angles_left_front_x <-  Speed_down_pre %>% ungroup() %>%
filter(parameter %in% c("d-front-left"  , "d-center-front")) %>%
select(parameter, x_corr, full_id, day,time) %>%
spread(parameter, x_corr, convert = F) %>% drop_na()
# left front y
angles_left_front_y <-  Speed_down_pre %>% ungroup() %>%
filter(parameter %in% c("d-front-left" , "d-center-front")) %>%
select(parameter, y_corr, full_id, day,time) %>%
spread(parameter, y_corr, convert = F) %>% drop_na()
# right back x
angles_right_back_x <-  Speed_down_pre %>% ungroup() %>%
filter(parameter %in% c("d-back-right" , "d-center-back" )) %>%
select(parameter, x_corr, full_id, day,time) %>%
spread(parameter, x_corr, convert = F) %>% drop_na()
# right back y
angles_right_back_y <-  Speed_down_pre %>% ungroup() %>%
filter(parameter %in% c("d-back-right" , "d-center-back"  )) %>%
select(parameter, y_corr, full_id, day,time) %>%
spread(parameter, y_corr, convert = F) %>% drop_na()
# left back x
angles_left_back_x <-  Speed_down_pre %>% ungroup() %>%
filter(parameter %in% c("d-back-left" , "d-center-back" )) %>%
select(parameter, x_corr, full_id, day, time) %>%
spread(parameter, x_corr, convert = F) %>% drop_na()
# left back y
angles_left_back_y <-  Speed_down_pre %>% ungroup() %>%
filter(parameter %in% c("d-back-left" , "d-center-back" )) %>%
select(parameter, y_corr, full_id, day,time) %>%
spread(parameter, y_corr, convert = F) %>% drop_na()
angle_rf<- left_join(angles_right_front_x, angles_right_front_y,  by = c("full_id","day",  "time"))
angle_lf<- left_join(angles_left_front_x, angles_left_front_y,  by = c("full_id","day",  "time"))
angle_rb<- left_join(angles_right_back_x, angles_right_back_y,  by = c("full_id","day",  "time"))
angle_lb<- left_join(angles_left_back_x, angles_left_back_y,  by = c("full_id","day", "time"))
## We will calculate the angle using atan2: angle = atan2(vector2.y, vector2.x) - atan2(vector1.y, vector1.x); Since we have points its the equivalent of: angle= atan2(P3.y - P1.y, P3.x - P1.x) -  atan2(P2.y - P1.y, P2.x - P1.x);
angle_rf_calc <- angle_rf %>%
mutate(dy = `d-front-right.y`-`d-center-front.y`, dx = (`d-front-right.x`-`d-center-front.x`)) %>%
mutate(angle = abs(atan2(dy,dx)*-180/pi)) %>% # - 180 -> because its the right side -> right is higher than center
mutate(angle = ifelse(angle>90, angle-90, angle)) %>%
add_column(joint = "RF")
angle_lf_calc <- angle_lf %>%
mutate(dy = `d-front-left.y`-`d-center-front.y`, dx = (`d-front-left.x`-`d-center-front.x`)) %>%
mutate(angle = abs(atan2(dy,dx)*180/pi)) %>%
mutate(angle = ifelse(angle>90, angle-90, angle)) %>%
add_column(joint = "LF")
angle_rb_calc <- angle_rb %>%
mutate(dy = `d-back-right.y`-`d-center-back.y`, dx = (`d-back-right.x`-`d-center-back.x`)) %>%
mutate(angle = abs(atan2(dy,dx)*-180/pi)) %>% # - 180 -> because its the right side -> right is higher than center
mutate(angle = ifelse(angle>90, angle-90, angle)) %>%
add_column(joint = "RB")
angle_lb_calc <- angle_lb %>%
mutate(dy = `d-back-left.y`-`d-center-back.y`, dx = (`d-back-left.x`-`d-center-back.x`)) %>%
mutate(angle = abs(atan2(dy,dx)*180/pi)) %>%
mutate(angle = ifelse(angle>90, angle-90, angle)) %>%
add_column(joint = "LB")
# Merge all data frames from individual angles
summary_angle_down <- bind_rows(angle_rf_calc, angle_lf_calc, angle_rb_calc, angle_lb_calc) %>%
group_by(full_id, day, joint) %>%
summarize(max_Angle= unname(quantile(angle, 0.95)), min_Angle= unname(quantile(angle, 0.1)), avg_Angle =mean(angle, na.rm = T) ) %>%
gather(Parameter, Value, max_Angle:avg_Angle) %>%
mutate(joint = factor(joint, levels = c("LF", "LB", "RB", "RF")))%>% # add parameter joint composed of side and limb
mutate(side = ifelse(joint %in% c("LF", "LB"), "left", "right")) %>%
mutate(limb = ifelse(joint %in% c("LF", "RF"), "front", "back"))
# Let's first look at the angles between toes and body center in an individual mouse
all_angle_down <- bind_rows(angle_rf_calc, angle_lf_calc, angle_rb_calc, angle_lb_calc) %>%
select(full_id, day, angle, joint,time) %>%
drop_na() %>%
filter(full_id %in% c("0days_Mouse_ID1")) %>%
filter(time > 5) %>%
mutate(side = ifelse(joint %in% c("LF", "LB"), "left", "right")) %>%
mutate(limb = ifelse(joint %in% c("LF", "RF"), "front", "back")) %>%
mutate(joint = factor(joint, levels = c("LF", "LB", "RB", "RF")))
limbcolors <- brewer.pal(4, "Set1")
PLOT_angle_down_single <- ggplot(all_angle_down, aes(x=time, y=angle))+
geom_point(aes(color=joint), size = 1, alpha = 0.2) +
geom_spline(aes(color=joint), spar = 0.3)+
facet_wrap(limb~side, scales = "free", nrow =1)+
scale_color_manual(values=limbcolors)+
scale_fill_manual(values=limbcolors)+
scale_y_continuous(limits = c(0,90))+
scale_x_continuous(limits = c(0,85))+
theme_bw()
PLOT_angle_down_single
##ggsave("PubFig//DOWN_03_Angles_representative_plot.pdf", PLOT_angle_down_single,  width = 5, height = 2.5, limitsize = F)
limbcolors <- brewer.pal(4, "Set1")
limbcolors <- c("#E41A1C33" ,"#377EB833" ,"#4DAF4A33", "#984EA333")
PLOT_Angle<- ggplot(summary_angle_down, aes(day, Value)) +
stat_boxplot(geom = "errorbar", width = 0.5)+
geom_boxplot(aes(fill=joint), fill = "white", alpha = 1, outlier.shape = NA) +
geom_boxplot(aes(fill=joint), alpha = .9, outlier.shape = NA) +
geom_jitter(width=0.1, alpha=0.4, pch=21,size=2.5, fill ="lightgrey")+
stat_summary(fun=mean, geom="point", shape=23, size=4, color="black", fill ="white")+
facet_wrap(Parameter~limb~side, scales = "free", nrow = 2)+
scale_y_continuous(limits = c(NA, NA)) +
scale_color_manual(values=limbcolors)+
scale_fill_manual(values=limbcolors)+
theme_bw()
PLOT_Angle
##ggsave("PubFig//DOWN_03_Angles_all_plots.pdf", PLOT_Angle,  width = 4.5, height = 9, limitsize = F)
# Create vertical_df and link body parts to front or back or down
vertical_df_pre <- long_data_clean2 %>%
mutate(limb = ifelse(parameter %in% c("l-wrist",
"l-front-toe-tip",
"l-elbow",
"l-shoulder",
"r-wrist",
"r-front-toe-tip",
"r-elbow",
"r-shoulder", "l-head", "r-head"), "front",
ifelse(parameter %in% c("l-back-ankle",
"l-back-toe",
"r-back-ankle",
"r-back-toe", "l-hip", "r-hip", "l-iliac-crest", "r-iliac-crest", "l-tail-base", "r-tail-base"), "back", "none"))) %>%
filter(side != "down") # exclude down perspective
# Add information about when a step starts and ends from Down Analysis to Side Analysis
steps_from_down_analysis <- Speed_down %>% ungroup() %>%
filter(phase_names == "stance") %>%
select(full_id, side, limb, phase_numbers,time) %>%
distinct(full_id, side, limb, phase_numbers, .keep_all=T)
vertical_df_steps <- vertical_df_pre %>% left_join(steps_from_down_analysis, by=c("full_id", "side", "limb", "time")) %>%
fill(phase_numbers) %>%
mutate(y_rel = y_corr/31.3667) # in cm
# Add parameter_short, important for subsequent analysis
vertical_df_steps$parameter_short <- substr(vertical_df_steps$parameter, 3, nchar(as.character(vertical_df_steps$parameter)))
vertical_df_steps$side <- factor(vertical_df_steps$side, levels =c("left", "right"))
vertical_df_steps$limb <- factor(vertical_df_steps$limb, levels =c("back", "front"))
# Plot the data, you should see a regular pattern and vertical lines determining the step cycle
validation_vertical_df_steps_test <- vertical_df_steps %>% filter(parameter %in% c("r-wrist", "l-wrist",
"r-back-ankle", "l-back-ankle",
"l-back-toe", "r-back-toe",
"l-front-toe-tip", "r-front-toe-tip",
"l-shoulder", "r-shoulder",
"l-hip", "r-hip"))
validation_vertical_df_steps_test$side <- factor(validation_vertical_df_steps_test$side, levels =c("right", "left"))
validation_vertical_df_steps_test <- validation_vertical_df_steps_test %>% group_by(full_id, side, limb, phase_numbers) %>% mutate(x_time = min(time))
validation_vertical_df_steps_select <- validation_vertical_df_steps_test %>%
filter(full_id %in% c("0days_Mouse_ID1"))
PLOT_validation_step_region <- ggplot(validation_vertical_df_steps_select, aes(x=time, y=y_rel))+
geom_line(aes(color=factor(parameter_short)))+
facet_wrap(side~full_id~limb, scales = "free", ncol=4)+
scale_x_continuous(limits = c(NA, NA))+
geom_vline(aes(xintercept = as.numeric(x_time)))  +
scale_y_continuous(limits = c(0, NA))+
theme_classic()+
theme(strip.text = element_text(size=4))
PLOT_validation_step_region
##ggsave("PubFig/TEST_RR_05B_step_into-walk_profile_clean.pdf", PLOT_validation_step_region, width=9, height=3, limitsize = F)
# Summarize the values:
summary_vertical_analysis_df_stroked <-  vertical_df_steps %>%
group_by(mouse, side, parameter_short, phase_numbers, full_id, day)  %>% # you do the calculation for every step
mutate(y_max=max(y_corr), y_min=min(y_corr), mean = mean(y_corr)) %>% # Identify the highest, lowest, middle coordinate per step
mutate(y_max_norm = y_max-y_min, mean_norm = mean - y_min, y_min_norm = y_min - y_min) %>%   # Relative heights per step
group_by(mouse, side, parameter_short, full_id, day) %>%  # You calculate for all steps the parameters
mutate(Movement = median(y_max_norm), Average_Height = median(mean_norm), Baseline = median(y_min_norm)) %>%
ungroup() %>%
distinct(Movement, .keep_all = T)
# Quality control for distribution of all values
PLOT_Vertical_Analysis_QC <- ggplot(summary_vertical_analysis_df_stroked, aes(Movement, fill = day)) +
geom_histogram(binwidth= 2) +
theme(legend.position = "none") +
scale_fill_manual(values=c(mycolors3))+
theme_bw()
PLOT_Vertical_Analysis_QC
summary_summary_vertical_analysis_df_2 <- summary_vertical_analysis_df_stroked %>%
filter(Movement < 30 & Movement > 5) %>%  # here you add the QC observation
gather(Measure, Value, Movement:Baseline)  %>%
filter(Measure != "Baseline") %>%
group_by(full_id, mouse, side, parameter_short, parameter, day,Measure)%>%
summarize(Value = median(Value)) # Remove 0 Values that you confirmed previously
summary_summary_vertical_analysis_df_2$day_Num <- as.numeric(gsub("[^0-9.]", "",  summary_summary_vertical_analysis_df_2$day))
vertical_analysis_df_zero <- summary_summary_vertical_analysis_df_2 %>% filter(day_Num == 0) %>%
group_by(parameter,Measure) %>%
summarize(Value_BL = median(Value))
summary_summary_vertical_analysis_df_3 <- summary_summary_vertical_analysis_df_2 %>% left_join(vertical_analysis_df_zero, by = c("parameter", "Measure")) %>%
mutate(Value = Value-Value_BL) %>%
mutate(Value= Value/31.3667*10) # in mm
summary_summary_vertical_analysis_df_4 <- summary_summary_vertical_analysis_df_3  %>%
filter(parameter_short != "head") # not important parameter
summary_summary_vertical_analysis_df_5 <- summary_summary_vertical_analysis_df_3  %>%
filter(parameter_short != "head") %>%
filter(day %in% c("0days", "3days", "21days"))
PLOT_FIRST_OVERVIEW_VERTICAL_BARPLOT<- ggplot(summary_summary_vertical_analysis_df_5, aes(x=as.factor(day), y = Value))+
stat_boxplot(geom = "errorbar", width = 0.5)+
geom_boxplot(aes(fill=parameter_short), fill = "white", alpha = 1, outlier.shape = NA) +
geom_boxplot(aes(fill=parameter_short), alpha = .9, outlier.shape = NA) +
geom_jitter(width=0.1, alpha=0.4, pch=21,size=2.5, fill ="lightgrey")+
stat_summary(fun=mean, geom="point", shape=23, size=4, color="black", fill ="white")+
facet_wrap(Measure~side~parameter_short, scales = "free", ncol = 9 )+
scale_y_continuous(limits = c(NA, NA))+
geom_hline(yintercept=0, linetype="dotted")+
theme_bw()
PLOT_FIRST_OVERVIEW_VERTICAL_BARPLOT
PLOT_SECOND_OVERVIEW_Vertical_TIMECOURSE <- ggplot(summary_summary_vertical_analysis_df_4, aes(x=(day_Num), y = Value))+
stat_summary(aes(fill=parameter_short), geom="ribbon", fun.data = "median_se",  alpha=0.2) +
stat_summary(aes(color=parameter_short),fun=median, geom="line") +
stat_summary(aes(fill=parameter_short), fun=median, geom="point", color = "black", shape=21, size =3, alpha = 0.7) +
facet_wrap(Measure~side~parameter_short, scales = "free", ncol = 9 )+
scale_y_continuous(limits = c(NA, NA))+
geom_hline(yintercept=0, linetype="dotted")+
theme_bw()
PLOT_SECOND_OVERVIEW_Vertical_TIMECOURSE
#ggsave("PubFig/06C3_Second_Overview_Vertical_Analysis12_non_normalized5.pdf", PLOT_SECOND_OVERVIEW_Vertical_TIMECOURSE, width=4.9, height=36, limitsize =F)
horizontal_df <- vertical_df_steps %>%
group_by(mouse,full_id, day, limb, side, parameter_short, phase_numbers) %>%
mutate(x_max = max(x_corr), x_min = min(x_corr), mean = mean(x_corr)) %>%
mutate(Movement = x_max - x_min) %>%
distinct(Movement, .keep_all = T) %>% # Collapse Elements
ungroup()%>%
group_by(mouse,full_id, day, limb, side, parameter_short) %>%
mutate(Average_Step_Size = median(Movement), Max_Step_Size = max(Movement), Min_Step_Size = min(Movement)) %>%
distinct(Average_Step_Size, .keep_all = T) # Collapse the elements
# Quality Control for Data -> show distribution of all data briefly
PLOT_Horizontal_Analysis_QC <- ggplot(horizontal_df, aes(Average_Step_Size, fill= day)) +
geom_histogram(binwidth= 10) +
theme_bw()+
scale_fill_manual(values=mycolors3)
PLOT_Horizontal_Analysis_QC
##### Protraction and Retraction  ####
##### To calculate Pro- and retraction, we need to refer to the relative distance between the toe tips and the hip, respectively the shoulder
### Minimal and maximal toe distance per step
horizontal_df_toe <- vertical_df_steps %>% filter(parameter_short %in% c("back-toe","front-toe-tip", "hip", "shoulder"))
hip_steps <- vertical_df_steps %>%
filter(parameter_short %in%  c("hip", "shoulder")) %>%
select(time, side, limb, x_corr, parameter_short, mouse, full_id, day, phase_numbers)
# Calculate protraction and retraction
horizontal_df_steps <- left_join(hip_steps, horizontal_df_toe, by = c("full_id", "day", "mouse",  "side", "limb", "time", "phase_numbers")) %>%
mutate(distance = x_corr.y - x_corr.x) %>%
group_by(full_id, day, mouse, side, limb, parameter_short.y,parameter) %>%
summarise(retraction = unname(quantile(distance, 0.05)), protraction = unname(quantile(distance, 0.95)), average=mean(distance), median = median(distance))%>%
gather(Measure, Value, retraction:median) %>%
filter(Value < 60 & Value > - 100) %>%
filter(!(parameter_short.y %in% c("shoulder", "hip")))
# Normalize to baseline
horizontal_df_steps_zero <- horizontal_df_steps %>% filter(day == "0days") %>%
group_by(parameter,Measure) %>%
summarize(Value_BL = median(Value))
new_hz_steps <- horizontal_df_steps %>% left_join(horizontal_df_steps_zero, by = c("parameter", "Measure")) %>%
mutate(Value = Value-Value_BL)  %>%
mutate(Value= Value/31.3667*10) # in mm
new_hz_steps$day_Num <- as.numeric(gsub("[^0-9.]", "",  new_hz_steps$day))
colors_toes <- c("#FBB040","#2AB34B")
## plot retraction and protraction
PLOT_Protraction_Retraction <- ggplot(new_hz_steps, aes(x=day, y=Value))+
stat_boxplot(geom = "errorbar", width = 0.5)+
geom_boxplot(aes(fill=parameter_short.y), fill = "white", alpha = 1, outlier.shape = NA) +
geom_boxplot(aes(fill=parameter_short.y), alpha = .9, outlier.shape = NA) +
geom_jitter(width=0.1, alpha=0.4, pch=21,size=2.5, fill ="lightgrey")+
stat_summary(fun=mean, geom="point", shape=23, size=3, color="black", fill ="white")+
facet_wrap(Measure~side~parameter_short.y, scales = "free", ncol = 8 )+
scale_fill_manual(values=c(colors_toes))+
scale_y_continuous(limits = c(NA, NA))+
geom_hline(yintercept=0, linetype="dotted")+
theme_bw()
PLOT_Protraction_Retraction
PLOT_Protraction_Retraction_line <- ggplot(new_hz_steps, aes(x=(day_Num), y = Value))+
stat_summary(aes(fill=parameter_short.y), geom="ribbon", fun.data = "median_se",  alpha=0.2) +
stat_summary(aes(color=parameter_short.y),fun=median, geom="line") +
stat_summary(aes(fill=parameter_short.y), fun=median, geom="point", color = "black", shape=21, size =3, alpha = 0.7) +
facet_wrap(Measure~side, scales = "free", ncol = 8 )+
scale_fill_manual(values=c(colors_toes))+
scale_color_manual(values=c(colors_toes))+
scale_y_continuous(limits = c(NA, NA))+
geom_hline(yintercept=0, linetype="dotted")+
theme_bw()
PLOT_Protraction_Retraction_line
## Step duration of individual paws
duration_steps <- vertical_df_steps %>%
group_by(full_id, day, mouse,  side,limb, phase_numbers) %>%
summarize(duration = max(time)) %>%
mutate(duration_minus = duration - lag(duration, default = first(duration))) %>%
mutate(seconds = duration_minus/60) %>% # We imaged with 60 fps
filter(phase_numbers >=3 ) %>%
group_by(full_id, day, mouse, side, limb) %>%
summarize(seconds = median(seconds)) %>%
unite(joint, side, limb, sep = "_", remove = F) %>%
mutate(joint = factor(joint, levels = c("left_front", "left_back", "right_back", "right_front")))
limbcolors <- brewer.pal(4, "Set1")
# Plot duration of a step
PLOT_DURATION_of_STEP <- ggplot(duration_steps, aes(x=as.factor(day), y=seconds))+
stat_boxplot(geom = "errorbar", width = 0.5)+
geom_boxplot(aes(fill=side), fill = "white", alpha = 1, outlier.shape = NA) +
geom_boxplot(aes(fill=joint), alpha = .9, outlier.shape = NA) +
geom_jitter(width=0.1, alpha=0.4, pch=21,size=2.5, fill ="lightgrey")+
stat_summary(fun=mean, geom="point", shape=23, size=4, color="black", fill ="white")+
facet_wrap(side~limb, scales = "free", nrow = 1)+
scale_color_manual(values=colors)+
scale_fill_manual(values=limbcolors)+
scale_y_continuous(limits = c(0,NA))+
theme_bw()
PLOT_DURATION_of_STEP
movement_per_step <- vertical_df_steps %>%
group_by(full_id,day, mouse, limb, side, phase_numbers, parameter_short) %>%
summarize(x_corr = mean(x_corr)) %>%
filter(parameter_short == "hip") %>% # reference to movement is the hip
group_by(full_id,day, mouse, limb, side, parameter_short) %>%
mutate(x_corr_diff = x_corr - lag(x_corr, default = first(x_corr))) %>%
filter(phase_numbers > 2) %>%
group_by(full_id, day, mouse, side, limb) %>% # per video
summarize(x_corr_diff = median(x_corr_diff))
# Plot distance during a step
PLOT_Distance_covered_per_step <- ggplot(movement_per_step, aes(x=day, y= x_corr_diff))+
stat_boxplot(geom = "errorbar", width = 0.5)+
geom_boxplot(aes(fill=side), fill = "white", alpha = 1, outlier.shape = NA) +
geom_boxplot(aes(fill=side), alpha = .9, outlier.shape = NA) +
geom_jitter(width=0.1, alpha=0.4, pch=21,size=2.5, fill ="lightgrey")+
facet_grid(.~side, scales = "free")+
scale_fill_manual(values=limbcolors)+
stat_summary(fun=mean, geom="point", shape=23, size=4, color="black", fill ="white")+
theme_bw()
PLOT_Distance_covered_per_step
# subset relevant joints to calculate the angles
vertical_analysis_df_stroked_angle <- filter(vertical_df_steps, parameter_short %in% c("wrist", "shoulder", "elbow", "front-toe-tip", "hip", "iliac-crest", "back-ankle", "back-toe")) %>%
select(-c(likelyhood, y_rel))
# subset data between sides, limbs and x and y coordinates
test_left_x_fr <- vertical_analysis_df_stroked_angle %>% ungroup () %>%  filter(side == "left" & limb == "front")%>% select(-c(parameter, y_corr))  %>% spread(parameter_short, x_corr, convert = F)
test_left_y_fr <- vertical_analysis_df_stroked_angle %>%  filter(side == "left" & limb =="front")%>% select(-c(parameter, x_corr)) %>%  spread(parameter_short, y_corr, convert = F)
test_right_x_fr <- vertical_analysis_df_stroked_angle %>%   filter(side == "right" & limb == "front")%>%  select(-c(parameter, y_corr)) %>%  spread(parameter_short, x_corr, convert = F)
test_right_y_fr <- vertical_analysis_df_stroked_angle %>%   filter(side == "right" & limb == "front") %>% select(-c(parameter, x_corr)) %>%  spread(parameter_short, y_corr, convert = F)
test_left_x_ba <- vertical_analysis_df_stroked_angle %>%  filter(side == "left" & limb == "back")%>% select(-c(parameter, y_corr)) %>% spread(parameter_short, x_corr, convert = F)
test_left_y_ba <- vertical_analysis_df_stroked_angle %>%  filter(side == "left" & limb =="back")%>% select(-c(parameter, x_corr)) %>%  spread(parameter_short, y_corr, convert = F)
test_right_x_ba <- vertical_analysis_df_stroked_angle %>%   filter(side == "right" & limb == "back")%>%  select(-c(parameter, y_corr)) %>%  spread(parameter_short, x_corr, convert = F)
test_right_y_ba <- vertical_analysis_df_stroked_angle %>%   filter(side == "right" & limb == "back") %>% select(-c(parameter, x_corr)) %>%  spread(parameter_short, y_corr, convert = F)
left_angle_fr <- left_join(test_left_x_fr, test_left_y_fr,  by = c("full_id", "mouse", "day", "limb", "side", "time", "phase_numbers"))
right_angle_fr <- left_join(test_right_x_fr, test_right_y_fr, by = c("full_id", "mouse", "day", "limb", "side", "time", "phase_numbers"))
left_angle_ba <- left_join(test_left_x_ba, test_left_y_ba,  by = c("full_id","mouse", "day",  "limb", "side", "time", "phase_numbers"))
right_angle_ba <- left_join(test_right_x_ba, test_right_y_ba, by = c("full_id", "mouse" ,"day",  "limb", "side", "time", "phase_numbers"))
# Arctan (see calculation angles down)
left_angle_fr_calc <- left_angle_fr %>%
mutate(shoulder_ellbow_wrist = (atan2((wrist.y-elbow.y), (wrist.x-elbow.x))- atan2((shoulder.y-elbow.y), (shoulder.x-elbow.x)))*180/pi) %>%
mutate(ellbow_wrist_toetip = (atan2((`front-toe-tip.y`-wrist.y), (`front-toe-tip.x`-wrist.x))- atan2((elbow.y-wrist.y), (elbow.x-wrist.x)))*180/pi) %>%
select(-c(elbow.x, `front-toe-tip.x`, shoulder.x, wrist.x , elbow.y, `front-toe-tip.y`, shoulder.y,  wrist.y)) %>%
gather(Joints, Angle, shoulder_ellbow_wrist:ellbow_wrist_toetip) %>%
drop_na() %>%
filter(Angle < 180)
right_angle_fr_calc <- right_angle_fr %>%
mutate(shoulder_ellbow_wrist = (atan2((wrist.y-elbow.y), (wrist.x-elbow.x))- atan2((shoulder.y-elbow.y), (shoulder.x-elbow.x)))*180/pi) %>%
mutate(ellbow_wrist_toetip = (atan2((`front-toe-tip.y`-wrist.y), (`front-toe-tip.x`-wrist.x))- atan2((elbow.y-wrist.y), (elbow.x-wrist.x)))*180/pi) %>%
select(-c(elbow.x, `front-toe-tip.x`, shoulder.x, wrist.x , elbow.y, `front-toe-tip.y`, shoulder.y,  wrist.y)) %>%
gather(Joints, Angle, shoulder_ellbow_wrist:ellbow_wrist_toetip) %>%
drop_na() %>%
filter(Angle < 180)
left_angle_back_calc <- left_angle_ba %>%
mutate(iliac_hip_ankle = (atan2((`back-ankle.y`-hip.y), (`back-ankle.x`-hip.x))- atan2((`iliac-crest.y`-hip.y), (`iliac-crest.x`-hip.x)))*180/pi) %>%
mutate(hip_ankle_toe = (atan2((`back-toe.y`-`back-ankle.y`), (`back-toe.x`-`back-ankle.x`))- atan2((hip.y-`back-ankle.y`), (hip.x-`back-ankle.x`)))*180/pi) %>%
select(-c(`back-ankle.x` , `back-ankle.y`, `back-toe.x`, `back-toe.y`,  hip.x, hip.y ,`iliac-crest.x`, `iliac-crest.y`)) %>%
gather(Joints, Angle,  iliac_hip_ankle:hip_ankle_toe) %>%
drop_na() %>%
filter(Angle < 180)
right_angle_back_calc <- right_angle_ba %>%
mutate(iliac_hip_ankle = (atan2((`back-ankle.y`-hip.y), (`back-ankle.x`-hip.x))- atan2((`iliac-crest.y`-hip.y), (`iliac-crest.x`-hip.x)))*180/pi) %>%
mutate(hip_ankle_toe = (atan2((`back-toe.y`-`back-ankle.y`), (`back-toe.x`-`back-ankle.x`))- atan2((hip.y-`back-ankle.y`), (hip.x-`back-ankle.x`)))*180/pi)%>%
select(-c(`back-ankle.x` , `back-ankle.y`, `back-toe.x`, `back-toe.y`,  hip.x, hip.y ,`iliac-crest.x`, `iliac-crest.y`)) %>%
gather(Joints, Angle,  iliac_hip_ankle:hip_ankle_toe) %>%
drop_na() %>%
filter(Angle < 180)
# Merge individual data frames to calculate the angles
all_horizontal_angles <- bind_rows(left_angle_back_calc, right_angle_back_calc, left_angle_fr_calc, right_angle_fr_calc) %>%
drop_na() %>%
filter(time > 5) %>%
mutate(Angle = abs(Angle)) %>%
filter(Angle < 180)
# select indivudal video
selected_horizontal_angles <- all_horizontal_angles %>% filter(full_id %in% c("0days_Mouse_ID1"))
PLOT_selected_horizontal_Angle <- ggplot(selected_horizontal_angles, aes(x=time, y=Angle))+
geom_point(aes(color=Joints), size = 1, alpha = 0.2) +
geom_spline(aes(color=Joints), spar = 0.4)+
facet_grid(limb~side, scales = "free")+
theme_bw()
PLOT_selected_horizontal_Angle
summary_horizontal_angles <- bind_rows(left_angle_back_calc, right_angle_back_calc, left_angle_fr_calc, right_angle_fr_calc) %>%
drop_na() %>%
group_by(mouse, full_id, day, limb, side, Joints) %>%
summarize(max_Angle= unname(quantile(Angle, 0.95)), min_Angle= unname(quantile(Angle, 0.1)), avg_Angle =mean(Angle)) %>%
gather(Parameter, Value, max_Angle:avg_Angle) %>%
mutate(Value = abs(Value))
summary_horizontal_angles$day_Num <- as.numeric(gsub("[^0-9.]", "",  summary_horizontal_angles$day))
PLOT_Angle<- ggplot(summary_horizontal_angles, aes(day, abs(Value))) +
stat_boxplot(geom = "errorbar", width = 0.5)+
geom_boxplot(aes(fill=Joints), fill = "white", alpha = 1, outlier.shape = NA) +
geom_boxplot(aes(fill=Joints), alpha = .9, outlier.shape = NA) +
geom_jitter(width=0.1, alpha=0.4, pch=21,size=2.5, fill ="lightgrey")+
stat_summary(fun=mean, geom="point", shape=23, size=4, color="black", fill ="white")+
facet_wrap(Parameter~Joints~side, scales = "free", ncol = 8)+
scale_y_continuous(limits = c(NA, NA))+
theme_bw()
PLOT_Angle
PLOT_horizontal_Angle_line <- ggplot(summary_horizontal_angles, aes(x=(day_Num), y = Value))+
# geom_ribbon(aes(fill = group_id), stat = 'summary', fun.data = 'mean_sem', alpha = 0.2)+
stat_summary(aes(fill=Joints), geom="ribbon", fun.data = "median_se",  alpha=0.2) +
stat_summary(aes(color=Joints),fun=median, geom="line") +
stat_summary(aes(fill=Joints), fun=median, geom="point", color = "black", shape=21, size =3, alpha = 0.7) +
facet_wrap(Parameter~side, scales = "free", ncol= 6)+
theme_bw()
PLOT_horizontal_Angle_line
##ggsave("PubFig//Horizontal_Angle_all2.pdf", PLOT_horizontal_Angle_line, width=5, height=9)
# Raw Data
# (1) Analysis from down perspective: Synchronization, Cycle duration, Stride length, Stance and Swing time, Angles
analysis_down <- DOWN_SMRY_SMRY_SYNCHR %>%
bind_rows(Cycle_duration)  %>%
bind_rows(Stride_length) %>%
bind_rows(Stance_Swing_time) %>%
rename(Measure = Parameter) %>%
ungroup() %>%
select(full_id, day, mouse, Measure, Value) %>%
mutate(ParameterGroup = "SynchrCycle_downPersp")
# (1.1) Analysis Angles from down perspective
angle_down <- summary_angle_down %>%
ungroup() %>%
unite(Measure, joint, Parameter, sep = "__") %>%
mutate(mouse = as.factor(sub(".*Mouse_", "" , summary_angle_down$full_id))) %>%
select(full_id, day, mouse, Measure, Value) %>%
mutate(ParameterGroup = "Angles_downPersp")
# (2) Side Perspective Vertical view, heights
analysis_vertical <- summary_summary_vertical_analysis_df_3 %>%
ungroup() %>%
unite(Measure, parameter, Measure, sep = "__") %>%
select(full_id, day, mouse, Measure, Value) %>%
rename(Value = Value) %>%
mutate(ParameterGroup = "VerticalHeight_Analysis_sidePersp")
# (3) Side Perspective Horizontal Analysis, Protraction, Retraction
analysis_pro_ret <- new_hz_steps %>%
unite(Measure, side, limb, Measure, sep = "__") %>%
ungroup() %>%
select(full_id, day, mouse, Measure, Value) %>%
mutate(ParameterGroup = "ProtractionRetraction_sidePrsp")
# (3.1) Side Perspective Duration and Moement per step
analysis_duration <- duration_steps %>%
rename(Value = seconds) %>%
mutate(Measure = "seconds") %>%
ungroup() %>%
unite(Measure, side, limb, Measure, sep = "__") %>%
select(full_id, day, mouse, Measure, Value) %>%
mutate(ParameterGroup = "duration_step_sidePersp")
analysis_steps <- movement_per_step %>%
rename(Value = x_corr_diff) %>%
mutate(Measure = "movement_per_step") %>%
ungroup() %>%
unite(Measure, side, limb, Measure, sep = "__") %>%
select(full_id ,day,  mouse, Measure, Value) %>%
mutate(ParameterGroup = "moement_per_step_sidePersp")
# (3.2) Angles from Side Perspective
angles_horizontal <- summary_horizontal_angles %>%
ungroup()%>%
rename(Measure = Parameter)%>%
unite(Measure, Measure, side, limb, Joints, sep = "__") %>%
select(full_id ,day, mouse, Measure, Value) %>%
mutate(ParameterGroup = "angles_horizontal_sidePersp")
all_raw_data <- analysis_down %>%
bind_rows(angle_down) %>%
bind_rows(analysis_vertical) %>%
bind_rows(analysis_pro_ret) %>%
bind_rows(angles_horizontal) %>%
bind_rows(analysis_duration) %>%
bind_rows(analysis_steps)
glimpse(all_raw_data)
# Summary with mean + SD
all_sum_data <- all_raw_data %>%
group_by(day, Measure, ParameterGroup) %>%
summarize(Mean = mean(Value), median = median(Value), sd = sd(Value), sem = sd(Value) / sqrt(length(Value)) )
glimpse(all_sum_data)
# Eport all plots
# ggsave("Output_Runway_Analysis/Output Figures/1_PLOT_bar_all_videos.pdf", PLOT_bar_all_videos, width=4, height=2.5)
# ggsave("Output_Runway_Analysis/Output Figures/2_PLOT_Donut_Summary_Validation.pdf", PLOT_Donut_Summary_Validation, width=10, height=3)
# ggsave("Output_Runway_Analysis/Output Figures/3_1_PLOT_control_for_outliers_before.pdf", PLOT_control_for_outliers_before, width=5, height=4)
# ggsave("Output_Runway_Analysis/Output Figures/3_2_PLOT_control_for_outliers_after.pdf", PLOT_control_for_outliers_after, width=5, height=4)
# ggsave("Output_Runway_Analysis/Output Figures/4_1_PLOT_Overview_Distribution_X.pdf", PLOT_Overview_Distribution_X, width=8, height=8)
# ggsave("Output_Runway_Analysis/Output Figures/4_2_PLOT_Overview_Distribution_Y.pdf", PLOT_Overview_Distribution_Y, width=8, height=8)
# ggsave("Output_Runway_Analysis/Output Figures/5_PLOT_overview_steps.pdf", PLOT_overview_steps, width=12, height=8)
# ggsave("Output_Runway_Analysis/Output Figures/6_1_PLOT_DOWN_Analysis_Speed_QC.pdf", PLOT_DOWN_Analysis_Speed_QC, width=3, height=2)
# ggsave("Output_Runway_Analysis/Output Figures/6_2_sync_plots.pdf", sync_plots, width=6, height=4)
# ggsave("Output_Runway_Analysis/Output Figures/7_1_PLOT_FIRST_OVERVIEW_VERTICAL_BARPLOT.pdf", PLOT_FIRST_OVERVIEW_VERTICAL_BARPLOT, width=15, height=8)
# ggsave("Output_Runway_Analysis/Output Figures/7.2_PLOT_SECOND_OVERVIEW_Vertical_TIMECOURSE.pdf", PLOT_SECOND_OVERVIEW_Vertical_TIMECOURSE, width=15, height=8)
# ggsave("Output_Runway_Analysis/Output Figures/8_1_PLOT_Horizontal_Analysis_QC.pdf", PLOT_Horizontal_Analysis_QC, width=3, height=3)
# ggsave("Output_Runway_Analysis/Output Figures/8.2_PLOT_Protraction_Retraction.pdf", PLOT_Protraction_Retraction, width=15, height=6)
# ggsave("Output_Runway_Analysis/Output Figures/8_3_PLOT_Protraction_Retraction_line.pdf", PLOT_Protraction_Retraction_line, width=15, height=3)
# ggsave("Output_Runway_Analysis/Output Figures/9_1_PLOT_DURATION_of_STEPE.pdf", PLOT_DURATION_of_STEP, width=4, height=3)
# ggsave("Output_Runway_Analysis/Output Figures/9_2_PLOT_Distance_covered_per_step.pdf", PLOT_Distance_covered_per_step, width=4, height=2)
# ggsave("Output_Runway_Analysis/Output Figures/10_1_PLOT_selected_horizontal_Angle.pdf", PLOT_selected_horizontal_Angle, width=5, height=4)
# ggsave("Output_Runway_Analysis/Output Figures/10_2_PLOT_horizontal_Angle_line.pdf", PLOT_horizontal_Angle_line, width=15, height=4)
# Eport all data
# write.csv(all_raw_data, "Output_Runway_Analysis/Output csv files/all_raw_data.csv")
# write.csv(all_sum_data, "Output_Runway_Analysis/Output csv files/all_summarized_data.csv")
